# Stack Definition for Staging
services:
  # Redis is used to back our worker queues. It is not exposed.
  redis:
    image: redis:7.0.10-alpine3.17@sha256:0859ed47321d2d26a3f53bca47b76fb7970ea2512ca3a379926dc965880e442e
    volumes:
      - redis-data:/data
    deploy:
      placement:
        # We run the redis instance on the manager node only
        constraints: [node.role == manager]
    logging:
      # Use journald log driver, see:
      # https://docs.docker.com/config/containers/logging/journald/
      driver: journald
      options:
        tag: redis

  mycustomdomain:
    # Staging runs the most recent commit on the main branch built for staging
    image: ghcr.io/developingspace/starchart:staging
    depends_on:
      - redis
    ports:
      - 8080:8080
    environment:
      # If the database needs to be wiped and (re)setup, add this
      #- DANGER_DATABASE_WIPE_REINITIALIZE=1
      - APP_URL=https://mycustomdomain-dev.senecapolytechnic.ca
      - AWS_ROUTE53_HOSTED_ZONE_ID=Z009022527TSGPKQVW5KF
      - LETS_ENCRYPT_ACCOUNT_EMAIL=mycustomdomain-dev@senecapolytechnic.ca
      - LETS_ENCRYPT_DIRECTORY_URL=https://acme-staging-v02.api.letsencrypt.org/directory
      - LOG_LEVEL=info
      - NODE_ENV=production
      - NOTIFICATIONS_EMAIL_USER=mycustomdomain-dev@senecapolytechnic.ca
      - PORT=8080
      - REDIS_URL=redis://redis:6379
      - ROOT_DOMAIN=stage.mystudentproject.ca
      - USER_DNS_RECORD_LIMIT=10
    secrets:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - DATABASE_URL
      - LETS_ENCRYPT_ACCOUNT_PRIVATE_KEY_PEM
      - NOTIFICATIONS_USERNAME
      - NOTIFICATIONS_PASSWORD
      - SESSION_SECRET
    deploy:
      mode: replicated
      replicas: 2
      rollback_config:
        # Rollback all containers at once if a deploy fails
        parallelism: 0
        failure_action: rollback
      update_config:
        # Stop all existing containers, then update one container at a time,
        # waiting 20s between each. If something fails, rollback to last-known-good.
        parallelism: 1
        delay: 20s
        failure_action: rollback
        order: stop-first
    logging:
      # Use journald log driver, see:
      # https://docs.docker.com/config/containers/logging/journald/
      driver: journald
      options:
        tag: mycustomdomain

secrets:
  AWS_ACCESS_KEY_ID:
    external: true
  AWS_SECRET_ACCESS_KEY:
    external: true
  DATABASE_URL:
    external: true
  LETS_ENCRYPT_ACCOUNT_PRIVATE_KEY_PEM:
    external: true
  NOTIFICATIONS_USERNAME:
    external: true
  NOTIFICATIONS_PASSWORD:
    external: true
  SESSION_SECRET:
    external: true

volumes:
  redis-data:
