import { ChakraProvider } from '@chakra-ui/react';
import { json, redirect } from '@remix-run/node';
import {
  Links,
  LiveReload,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
  useLoaderData,
} from '@remix-run/react';

import { getUser, getEffectiveUser, setEffectiveUsername } from './session.server';

import theme from './theme';

import type { LoaderArgs, LinksFunction, ActionArgs, V2_MetaFunction } from '@remix-run/node';

export const meta: V2_MetaFunction = () => [
  { charset: 'utf-8' },
  { title: 'My.Custom.Domain' },
  { name: 'description', content: 'Simple, Secure DNS Records and SSL Certificates for Seneca' },
  { name: 'viewport', content: 'width=device-width,initial-scale=1' },
];

export const links: LinksFunction = () => [
  // We want html and body to occupy the full window height for vertical centering
  { rel: 'stylesheet', href: '/styles.css', type: 'text/css', as: 'style' },
  { rel: 'icon', href: '/favicon.ico', sizes: 'any' },
  { rel: 'manifest', href: '/manifest.json' },
];

export async function loader({ request, context }: LoaderArgs) {
  return json({
    user: await getUser(request),
    /**
     * the effectiveUsername, this is for admin impersonating users. Regular
     * users will have an effectiveUsername that is always the same as their
     * username, admins (identified by group) will start with an empty string
     * that can be changed to another users username on the admin portal for
     * them to impersonate
     **/
    effectiveUser: await getEffectiveUser(request),
    nonce: context.nonce as string,
  });
}

export const action = async ({ request }: ActionArgs) => {
  const formData = await request.formData();
  const originalName = formData.get('originalName');
  if (typeof originalName === 'string') {
    return redirect('/', {
      headers: {
        'Set-Cookie': await setEffectiveUsername(originalName, null),
      },
    });
  }
};

function Document({ children }: { children: React.ReactNode }) {
  // We need the nonce generated by the server via helmetjs to put on scripts
  const { nonce } = useLoaderData<typeof loader>();

  return (
    <html lang="en-CA">
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration nonce={nonce} />
        <Scripts nonce={nonce} />
        <LiveReload nonce={nonce} />
      </body>
    </html>
  );
}

export default function App() {
  return (
    <Document>
      <ChakraProvider theme={theme}>
        <Outlet />
      </ChakraProvider>
    </Document>
  );
}
