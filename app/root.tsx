import { ChakraProvider } from '@chakra-ui/react';
import { json } from '@remix-run/node';
import { Links, Meta, Outlet, Scripts, ScrollRestoration, useLoaderData } from '@remix-run/react';

import { getUser, getEffectiveUser, stopImpersonation } from './session.server';

import theme from './theme';

import type {
  LoaderFunctionArgs,
  LinksFunction,
  ActionFunctionArgs,
  MetaFunction,
} from '@remix-run/node';

export const meta: MetaFunction = () => [
  { charset: 'utf-8' },
  { title: 'My.Custom.Domain' },
  { name: 'description', content: 'Simple, Secure DNS Records and SSL Certificates for Seneca' },
  { name: 'viewport', content: 'width=device-width,initial-scale=1' },
];

export const links: LinksFunction = () => [
  { rel: 'icon', href: '/favicon.ico', sizes: 'any' },
  { rel: 'manifest', href: '/manifest.json' },
];

export async function loader({ request, context }: LoaderFunctionArgs) {
  return json({
    user: await getUser(request),
    /**
     * the effectiveUsername, this is for admin impersonating users. Regular
     * users will have an effectiveUsername that is always the same as their
     * username, admins (identified by group) will start with an empty string
     * that can be changed to another users username on the admin portal for
     * them to impersonate
     **/
    effectiveUser: await getEffectiveUser(request),
    nonce: context.nonce as string,
  });
}

export const action = async ({ request }: ActionFunctionArgs) => {
  const formData = await request.formData();
  const intent = formData.get('intent');
  if (intent === 'stop-impersonation') {
    return stopImpersonation(request);
  }
};

function Document({ children }: { children: React.ReactNode }) {
  // We need the nonce generated by the server via helmetjs to put on scripts
  const { nonce } = useLoaderData<typeof loader>();

  return (
    <html lang="en-CA">
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration nonce={nonce} />
        <Scripts nonce={nonce} />
      </body>
    </html>
  );
}

export default function App() {
  return (
    <Document>
      <ChakraProvider theme={theme}>
        <Outlet />
      </ChakraProvider>
    </Document>
  );
}
